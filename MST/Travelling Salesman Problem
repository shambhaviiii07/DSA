Travelling Salesman Problem (Recursive)

import math
def TSP(cities,visited,city,n):
    if visited==((1<<n)-1):
        return cities[city][0]
    
    finalCost=math.inf
    for c in range(n):
        if visited & (1<<c)==0:
            tempCost=cities[city][c]+TSP(cities,visited | (1<<c),c,n)
            finalCost=min(finalCost,tempCost)
    return finalCost
if __name__=="__main__":
    cities=[[0,20,42,25],
          [20,0,30,34],
          [42,30,0,10],
          [25,34,10,0]]
    vertices=4
    
    print(TSP(cities,1,0,vertices))

Travelling Salesman Problem (DP)


import math
def TSP(cities,visited,city,n,dp):
    if visited==((1<<n)-1):
        return cities[city][0]
    if dp[visited][city]!=-1:
        return dp[visited][city]
    finalCost=math.inf
    for c in range(n):
        if visited & (1<<c)==0:
            tempCost=cities[city][c]+TSP(cities,visited | (1<<c),c,n,dp)
            finalCost=min(finalCost,tempCost)
    dp[visited][city]=finalCost
    return finalCost
if __name__=="__main__":
    cities=[[0,20,42,25],
          [20,0,30,34],
          [42,30,0,10],
          [25,34,10,0]]
    vertices=4
    dp=[[-1 for j in range(vertices)]for i in range(1<<vertices)]
    print(TSP(cities,1,0,vertices,dp))
