Problem Link--->https://www.tutorialspoint.com/optimize-water-distribution-in-a-village-in-python

Using Kruskal's Algorithm

class Solution(object):
   def find(self, a):
      if self.parent[a] == -1:
         return a
      self.parent[a] = self.find(self.parent[a])
      return self.parent[a]
   def union(self,a,b):
      parent_a = self.find(a)
      parent_b = self.find(b)
      if parent_a == parent_b:
         return True
      self.parent[parent_b] = parent_a
      return False
   def minCostToSupplyWater(self, n, well, pipes):
      self.parent = [-1 for i in range(n+1)]
      counter = 0
      for i in range(len(well)):
         pipes.append([0,i+1,well[i]])
         counter+=1
      pipes = sorted(pipes,key=lambda v:v[2])
      cost = 0
      for i in pipes:
         #print(i)
         source = i[0]
         destination = i[1]
         temp = i[2]
         if not self.union(source,destination):
            cost+=temp
            return cost
   
ob = Solution()
print(ob.minCostToSupplyWater(3, [1,2,2], [[1,2,1],[2,3,1]]))

Using Prim's Algorithm

import math
def build_graph(n,wells,pipes):
    graph = [[-1]*(n+1) for _ in range(n+1)]
    for pipe in pipes:
        house1 = pipe[0]
        house2 = pipe[1]
        cost = pipe[2]
        graph[house1][house2] = cost
        graph[house2][house1] = cost
    for i in range(len(wells)):
        graph[0][i+1] = wells[i]
        graph[i+1][0] = wells[i]
    return graph

def find_min_distance(distance,visited,n):
    node=-1
    mini=math.inf
    for i in range(n+1):
        if mini>distance[i] and visited[i]!=True:
            mini=distance[i]
            node=i
    return node
def prims(graph,n):
    distance=[math.inf for i in range(n+1)]
    visited=[False for j in range(n+1)]
    distance[0]=0
    for i in range(n+1):
        vertex=find_min_distance(distance,visited,n)
        visited[vertex]=True 
        for j in range(n+1):
            if graph[vertex][j]!=-1:
                if graph[vertex][j]<distance[j] and visited[j] is not True:
                    distance[j]=graph[vertex][j]
    return sum(distance)
def solve(n,wells,pipes):
    graph = build_graph(n,wells,pipes)
    print(prims(graph,n))

if __name__ == "__main__":
    n = 5
    wells = [2,0,1,2,3]
    pipes = [[1,2,1],[2,3,2],[4,5,3]]
    solve(n,wells,pipes)
