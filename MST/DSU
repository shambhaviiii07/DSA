class DSU:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.rank = [0 for _ in range(n)]
        self.size = [1 for _ in range(n)]

    def findParent(self, node):
        if self.parent[node] == node:
            return node
        self.parent[node] = self.findParent(self.parent[node])
        return self.parent[node]

    def union(self, u, v):
        pu = self.findParent(u)
        pv = self.findParent(v)
        if self.rank[pv] == self.rank[pu]:
            self.parent[pv] = pu
            self.rank[pu] = self.rank[pu] + 1
        elif self.rank[pu] < self.rank[pv]:
            self.parent[pu] = self.parent[pv]
        elif self.rank[pu] > self.rank[pv]:
            self.parent[pv] = self.parent[pu]
    
    def size(self, u, v):
        pu = self.findParent(u)
        pv = self.findParent(v)
        if self.size[pu] < self.size[pv]:
            self.parent[pu] = pv
            self.size[pv] = self.size[pu] + self.size[pv]
        else:
            self.parent[pv] = pu
            self.size[pu] = self.size[pu] + self.size[pv]
    
    def display(self):
        print(self.rank)
        print(self.parent)
        print(self.size)



