def dfs(node,parent,visited,discoveryTime,lowestTime,bridges,graph,timer):
    visited[node]=True
    discoveryTime[node]=timer
    lowestTime[node]=timer
    timer+=1
    for dost in graph[node]:
        if dost==parent:
            continue
        elif visited[dost] is False:
            dfs(dost,node,visited,discoveryTime,lowestTime,bridges,graph,timer)
            lowestTime[node]=min(lowestTime[node],lowestTime[dost])
            if lowestTime[dost]>discoveryTime[node]:
                bridges.append([node,dost])
        else:
            lowestTime[node]=min(lowestTime[node],discoveryTime[dost])
def findBridges(edges,vertices):
    visited=[False for i in range(vertices)]
    discoveryTime=[0]*vertices
    lowestTime=[0]*vertices
    bridges=list()
    graph=dict()
    for i in range(vertices):
        graph[i]=list()
    for edge in edges:
        u,v=edge
        graph[u].append(v)
        graph[v].append(u)
    timer=0
    for node in range(vertices):
        if visited[node] is not True:
            dfs(node,-1,visited,discoveryTime,lowestTime,bridges,graph,timer)
    return bridges
    
if __name__=="__main__":
    edges=[[0,1],[0,2],[1,2],[1,3],[3,4],[3,6],[4,5],[5,6]]
    vertices=7
    ans=findBridges(edges,vertices)
    print(ans)
