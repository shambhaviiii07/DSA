Problem Link--->https://leetcode.com/problems/path-with-minimum-effort/

Dijkstra's Application

class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        minHeap=[]
        directions=[[-1,0],[0,-1],[1,0],[0,1]]
        heappush(minHeap,(0,0,0))
        visited=[[False for j in range(len(heights[0]))]for i in range(len(heights))]
        while minHeap:
            effort,i,j=heappop(minHeap)
            if visited[i][j]:
                continue
            visited[i][j]=True
            if i+1==len(heights) and j+1==len(heights[0]):
                return effort
            for x,y in directions:
                row,col=i+x,j+y
                if row>=0 and row<len(heights) and col>=0 and col<len(heights[0]) and visited[row][col] is False:
                    Effort=max(effort,abs(heights[i][j]-heights[row][col]))
                    heappush(minHeap,(Effort,row,col))
