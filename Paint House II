problem link----> lintcode.com/problem/516/
problem linl---->https://leetcode.com/problems/minimum-falling-path-sum-ii/

Approach 1:Brute Force   [TLE for LintCode]
class Solution:
    """
    @param costs: n x k cost matrix
    @return: an integer, the minimum cost to paint all houses
    """
    def minCostII(self, costs):
        # write your code here
        if len(costs)==0:
            return 0
        k=len(costs[0])
        for i in range(1,len(costs)):
            for j in range(k):
                min_cost=math.inf
                for m in range(k):
                    if j!=m:
                        min_cost=min(min_cost,costs[i-1][m])
                costs[i][j]+=min_cost
        return min(costs[-1])
        
 PS: will work for Paint House I also.
 
 
 Approach 2:Dynamic Programming
class Solution:
    """
    @param costs: n x k cost matrix
    @return: an integer, the minimum cost to paint all houses
    """
    def minCostII(self, costs):
        if len(costs) == 0:
            return 0
        fir_min = float('inf')
        sec_min = float('inf')
        i_f = -1                   #initializing first min index
        i_s = -1                   #initializing second min index
        for i in range(len(costs[0])):
            if costs[0][i]<fir_min:   
                sec_min = fir_min
                i_s = i_f
                fir_min = costs[0][i]
                i_f = i
            elif costs[0][i]<sec_min:
                sec_min = costs[0][i]  
                i_s = i  
        for i in range(1,len(costs)):
            prev_fir_min = fir_min
            prev_sec_min = sec_min
            prev_i_f = i_f
            prev_i_s = i_s
            fir_min = float('inf')
            sec_min = float('inf')
            for k in range(len(costs[0])):
                if k!=prev_i_f:
                    costs[i][k] += prev_fir_min
                else:
                    costs[i][k] += prev_sec_min 

                if costs[i][k]<fir_min:
                    sec_min = fir_min
                    i_s = i_f
                    fir_min = costs[i][k]
                    i_f = k
                elif costs[i][k]<sec_min:
                    sec_min = costs[i][k]  
                    i_s = k
         
        return min(costs[-1])
