class TrieNode:
    def __init__(self):
        self.child=[None]*26
        self.wordEnd=0
class Trie:
    trieRoot=None
    def __init__(self):
        Trie.trieRoot=TrieNode()
    def insert(self,word):
        curr=Trie.trieRoot
        for i in word:
            index=ord(i)-ord('a')
            if curr.child[index] is None:
                curr.child[index]=TrieNode()
            curr=curr.child[index]
        curr.wordEnd=1
    def search(self,word):
        curr=self.trieRoot
        for i in word:
            index=ord(i)-ord('a')
            if curr.child[index] is None:
                return False
            curr=curr.child[index]
        if curr.wordEnd==1:
            return True
        else:
            return False
    def delete(self,word):
        curr=self.trieRoot
        for i in word:
            index=ord(i)-ord('a')
            if  curr.child[index]:
                curr=curr.child[index]
            else:
                print('word not found')
                return
        curr.wordEnd=0
trie=Trie()
(trie.insert('abc'))
(trie.insert('abd'))
print(trie.search('ab'))
print(trie.search('abc'))
print(trie.search('da'))
(trie.delete('abc'))
print(trie.search('abc'))
trie.insert('abcd')
print(trie.search('abcd'))
print(trie.search('abc'))
