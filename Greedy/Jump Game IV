Solution 1: (TLE)

class Solution {
    public int minJumps(int[] arr) {
        if (arr.length < 2) {
            return 0;
        } else if (arr[0] == arr[arr.length - 1]) {
            return 1;
        }
        
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = arr.length - 1; i >= 0; i--) {
            if (map.containsKey(arr[i])) {
                map.get(arr[i]).add(i);
            } else {
                List<Integer> indices = new ArrayList<>();
                indices.add(i);
                map.put(arr[i], indices);
            }
        }
        
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0});
        Set<Integer> visitedIndex = new HashSet<>();
        visitedIndex.add(0);
        int flag = 0;
        int ans = 0;
        int jumps = 0;
        
        while (!queue.isEmpty() && flag == 0) {
            int l = queue.size();
            jumps++;
            
            for (int i = 0; i < l; i++) {
                int[] current = queue.poll();
                int currentIndex = current[0];
                int count = current[1];
                
                if (currentIndex == arr.length - 1) {
                    flag = 1;
                    ans = count;
                    break;
                }
                
                if (currentIndex - 1 >= 0 && !visitedIndex.contains(currentIndex - 1)) {
                    visitedIndex.add(currentIndex - 1);
                    queue.add(new int[]{currentIndex - 1, count + 1});
                }
                
                if (currentIndex + 1 < arr.length && !visitedIndex.contains(currentIndex + 1)) {
                    visitedIndex.add(currentIndex + 1);
                    queue.add(new int[]{currentIndex + 1, count + 1});
                }
                
                List<Integer> indices = map.get(arr[currentIndex]);
                if (indices != null) {
                    for (int j : indices) {
                        if (!visitedIndex.contains(j)) {
                            visitedIndex.add(j);
                            queue.add(new int[]{j, count + 1});
                        }
                    }
                }
            }
        }
        
        return ans;
    }
}
