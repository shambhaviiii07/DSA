Problem Link--->https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1/?page=1&company[]=Morgan%20Stanley&sortBy=submissions#

import math

Space Optimized

def Knapsack(n,wt,val,W):
    prev=[0 for j in range(W+1)]
    for j in range(W+1):
        if j>=wt[0]:
            prev[j]=val[0]
    for i in range(1,n):
        curr=[0 for j in range(W+1)]
        for j in range(W+1):
            notTake=prev[j]
            take=-math.inf
            if wt[i]<=j:
                take=val[i]+prev[j-wt[i]]
            curr[j]=max(take,notTake)
        prev=curr
    return prev[W]


def tabulationKnapsack(n,wt,val,W):
    dp=[[0 for j in range(W+1)]for i in range(n)]
    for j in range(W+1):
        if j>=wt[0]:
            dp[0][j]=val[0]
    for i in range(1,n):
        for j in range(W+1):
            notTake=dp[i-1][j]
            take=-math.inf
            if wt[i]<=j:
                take=val[i]+dp[i-1][j-wt[i]]
            dp[i][j]=max(take,notTake)
    return dp[n-1][W]
    
def memoizationKnapsack(n,wt,val,W):
    dp=[[-1 for j in range(W+1)]for i in range(n)]
    def solve(i,w):
        if i==0:
            if w>=wt[i]:
                return val[i]
            else:
                return 0
        if dp[i][w]!=-1:
            return dp[i][w]
        notTake=solve(i-1,w)
        take=-math.inf
        if w>=wt[i]:
            take=val[i]+solve(i-1,w-wt[i])
        dp[i][w] = max(take,notTake)
        return dp[i][w]
    return solve(n-1,W)
    
def recursiveKnapsack(n,wt,val,W):
    def solve(i,w):
        if i==0:
            if w>=wt[i]:
                return val[i]
            else:
                return 0
        notTake=solve(i-1,w)
        take=-math.inf
        if w>=wt[i]:
            take=val[i]+solve(i-1,w-wt[i])
        return max(take,notTake)
    return solve(n-1,W)
    
t=int(input())
for _ in range(t):
    n=int(input())
    wt=list(map(int,input().split()))
    val=list(map(int,input().split()))
    W=int(input())
    print(Knapsack(n,wt,val,W))
