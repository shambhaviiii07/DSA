Problem Link--->https://www.codingninjas.com/codestudio/problems/ninja-and-his-friends_3125885?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0


RECURSIVE

TC-O(3^N * 3^N)
SC-O(N)

def maximumChocolates(r: int, c: int, grid: List[List[int]]) -> int:
  def solve(x,alice,bob):
        if alice<0 or alice>=c or bob>=c or bob<0:
            return -math.inf
        if x==r-1:
            if alice==bob:
                return grid[x][alice]
            else:
                return grid[x][alice]+grid[x][bob]
        maxi=-math.inf
        for i in [-1,0,1]:
            for j in [-1,0,1]:
                if bob==alice:
                    val= grid[x][alice]
                else:
                    val= grid[x][alice]+grid[x][bob]
                val+=solve(x+1,i+alice,j+bob)
                maxi=max(maxi,val)
        return maxi
    return solve(0,0,c-1)
    
    
    
MEMOIZATION

#     TC-O(R*C*C)*9
#     SC-O(R*C*C)+O(R)

def maximumChocolates(r: int, c: int, grid: List[List[int]]) -> int:

    dp=[[[-1 for _ in range(c)]for __ in range(c)]for ___ in range(r)]
    def solve(x,alice,bob):
        if not 0<=alice<len(grid[0]) or not 0<=bob<len(grid[0]):
            return -math.inf
        if dp[x][alice][bob]!=-1:
            return dp[x][alice][bob]
        if x==len(grid)-1:
            if alice==bob:
                dp[x][alice][bob]= grid[x][alice]
            else:
                dp[x][alice][bob]= grid[x][alice]+grid[x][bob]
            return dp[x][alice][bob]
        maxi=-math.inf
        for i in range(-1,2):
            for j in range(-1,2):
                if alice==bob:
                    VAL= grid[x][alice]
                else:
                    VAL=grid[x][alice]+grid[x][bob]
                VAL+=solve(x+1,i+alice,j+bob)
                maxi=max(maxi,VAL)
        dp[x][alice][bob]= maxi
        return maxi
    return solve(0,0,len(grid[0])-1)
                

Tabulation

TC-O(R*C*C)*9
SC-O(R*C*C)
 
import math
def maximumChocolates(r: int, c: int, grid: List[List[int]]) -> int:
    DP=[[[-1 for j2 in range(c)]for j1 in range(c)]for i in range(r)]
    for j1 in range(c):
        for j2 in range(c):
            if j1==j2:
                DP[r-1][j1][j2]=grid[r-1][j1]
            else:
                DP[r-1][j1][j2]=grid[r-1][j1]+grid[r-1][j2]
    for i in range(r-2,-1,-1):
        for j1 in range(c):
            for j2 in range(c):
                maxi=-math.inf
                for dj1 in range(-1,2):
                    for dj2 in range(-1,2):
                        if j1!=j2:
                            val=grid[i][j1]+grid[i][j2]
                        else:
                            val=grid[i][j1]
                        if j1+dj1 in range(c) and j2+dj2 in range(c):
                            val+=DP[i+1][j1+dj1][j2+dj2]
                        else:
                            val=-math.inf
                        maxi=max(maxi,val)
                DP[i][j1][j2]=maxi
    return DP[0][0][c-1]  
