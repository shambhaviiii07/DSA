Problem Link--->https://leetcode.com/problems/burst-balloons/description/

import math
def maxCoins(a: List[int]) -> int:

Tabulation

    n=len(a)
    a=[1]+a+[1]
    dp=[[0 for j in range(n+2)]for i in range(n+2)]
    for i in range(n,0,-1):
        for j in range(1,n+1):
            if i>j:
                continue
            maximum=-math.inf
            for k in range(i,j+1):
                cost=a[i-1]*a[k]*a[j+1]+(dp[i][k-1]+dp[k+1][j])
                maximum=max(maximum,cost)
            dp[i][j]=maximum
    return dp[1][n]

Memoization

    n=len(a)
    a=[1]+a+[1]
    dp=[[-1 for j in range(n+2)]for i in range(n+2)]
    def solve(i,j):
        if i>j:
            return 0
        if dp[i][j]!=-1:
            return dp[i][j]
        maximum=-math.inf
        for k in range(i,j+1):
            cost=a[i-1]*a[k]*a[j+1]+solve(i,k-1)+solve(k+1,j)
            maximum=max(maximum,cost)
        dp[i][j]=maximum
        return dp[i][j]
    return solve(1,n)
    
Recursion
    
    n=len(a)
    a=[1]+a+[1]
    def solve(i,j):
        if i>j:
            return 0
        maximum=-math.inf
        for k in range(i,j+1):
            cost=a[i-1]*a[k]*a[j+1]+(solve(i,k-1)+solve(k+1,j))
            maximum=max(maximum,cost)
        return maximum
    return solve(1,n)
