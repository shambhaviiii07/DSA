Problem Link---> https://www.codingninjas.com/codestudio/problems/maximum-path-sum-in-the-matrix_797998?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

def getMaxPathSum(matrix):
  for i in range(1,len(matrix)):
        for j in range(len(matrix[0])):
            left,right=-math.inf,-math.inf
            if j-1 in range(len(matrix[0])):
                left=matrix[i-1][j-1]
            if j+1 in range(len(matrix[0])):
                right=matrix[i-1][j+1]
            down=matrix[i-1][j]
            matrix[i][j]=max(left,right,down)+matrix[i][j]
    return max(matrix[-1])

TABULATION

    dp=[[-1 for j in range(len(matrix[0]))]for i in range(len(matrix))]
    for i in range(len(matrix[0])):
        dp[0][i]=matrix[0][i]
    for i in range(1,len(matrix)):
        for j in range(len(matrix[0])):
            left,right=-math.inf,-math.inf
            if j-1 in range(len(matrix[0])):
                left=dp[i-1][j-1]
            if j+1 in range(len(matrix[0])):
                right=dp[i-1][j+1]
            down=dp[i-1][j]
            dp[i][j]=max(left,right,down)+matrix[i][j]
    return max(dp[-1])
    
    
MEMOIZATION

TC-O(N*M)
SC-O(N*M)+O(N)


    dp=[[-1 for j in range(len(matrix[0]))]for i in range(len(matrix))]
    def solve(i,j):
        if j not in range(len(matrix[0])) :
            return -math.inf
        if i==0:
            return matrix[0][j]
        if dp[i][j]!=-1:
            return dp[i][j]
        leftDiagonal=solve(i-1,j-1)+matrix[i][j]
        rightDiagonal=solve(i-1,j+1)+matrix[i][j]
        up=solve(i-1,j)+matrix[i][j]
        dp[i][j]=max(up,leftDiagonal,rightDiagonal)
        return dp[i][j]
    maximum=-math.inf
    for j in range(len(matrix[0])):
        maximum=max(maximum,solve(len(matrix)-1,j))
    return maximum

RECURSION

TC-O(3^N)
sc-O(N)

    def solve(i,j):
        if j not in range(len(matrix[0])) :
            return -math.inf
        if i==0:
            return matrix[0][j]
        leftDiagonal=solve(i-1,j-1)+matrix[i][j]
        rightDiagonal=solve(i-1,j+1)+matrix[i][j]
        up=solve(i-1,j)+matrix[i][j]
        return max(up,leftDiagonal,rightDiagonal)
    maximum=-math.inf
    for j in range(len(matrix[0])):
        maximum=max(maximum,solve(len(matrix)-1,j))
    return maximum
