Problem Link--->https://leetcode.com/problems/longest-palindromic-subsequence/description/

class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        t=s[::-1]
        dp=[[0 for j in range(len(s)+1)]for i in range(len(t)+1)]
        for i in range(1,len(s)+1):
            for j in range(1,len(t)+1):
                if s[i-1]==t[j-1]:
                    dp[i][j]=1+dp[i-1][j-1]
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])
        return dp[len(s)][len(t)]
        
        
        dp=[[-1 for j in range(len(s)+1)]for i in range(len(t)+1)]
        def memoization(i,j):
            if i==0 or j==0:
                return 0
            if s[i-1]==t[j-1]:
                dp[i][j]=1+memoization(i-1,j-1)
            if dp[i][j]!=-1:
                return dp[i][j]
            dp[i][j]=max(memoization(i-1,j),memoization(i,j-1))
            return dp[i][j]
            
        
        def recursive(i,j):
            if i==0 or j==0:
                return 0
            if s[i-1]==t[j-1]:
                return 1+recursive(i-1,j-1)
            return max(recursive(i-1,j),recursive(i,j-1))
        return solve(len(s),len(t))
