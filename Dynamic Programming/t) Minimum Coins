Problem Link---> https://www.codingninjas.com/codestudio/problems/find-minimum-number-of-coins_975277?leftPanelTab=0

import math
denominations = [1, 2, 5, 10, 20, 50, 100, 500, 1000]

def findMinimumCoins(amount):

SPACE OPTIMIZATION

    prev=[math.inf for j in range(amount+1)]
    prev[0]=1
    for j in range(amount+1):
        if j%denominations[0]==0:
            prev[j]=j//denominations[0]
    for i in range(1,len(denominations)):
        curr=[math.inf for j in range(amount+1)]
        for j in range((amount)+1):
            notTake=prev[j]
            if j>=denominations[i]:
                take=1+curr[j-denominations[i]]
            else:
                take=math.inf
            curr[j]=min(take,notTake)
        prev=curr
    return prev[amount]

TABULATION

    dp=[[math.inf for j in range(amount+1)]for i in range(len(denominations))]
    for i in range(len(denominations)):
        dp[i][0]=1
    for j in range(amount+1):
        if j%denominations[0]==0:
            dp[0][j]=j//denominations[0]
    for i in range(1,len(denominations)):
        for j in range(amount+1):
            notTake=dp[i-1][j]
            if j>=denominations[i]:
                take=1+dp[i][j-denominations[i]]
            else:
                take=math.inf
            dp[i][j]=min(notTake,take)
    return dp[len(denominations)-1][amount]
    
MEMOIZATION
    
    dp=[[-1 for j in range(amount+1)]for i in range(len(denominations))]
    def solve(i,amt):
        if amt==0:
            return 1
        if i==0:
            if amt%denominations[i]==0:
                return amt//denominations[i]
            else:
                return math.inf
        if dp[i][amt]!=-1:
            return dp[i][amt]
        notTake=solve(i-1,amt)
        if amt>denominations[i]:
            take=1+solve(i,amt-denominations[i])
        elif amt==denominations[i]:
            take=solve(i,amt-denominations[i])
        else:
            take=math.inf
        dp[i][amt]= min(take,notTake)
        return dp[i][amt]
        
RECURSIVE
        
    def recursive(i,amt):
        if amt==0:
            return 1
        if i==0:
            if amt%denominations[i]==0:
                return amt//denominations[i]
            else:
                return math.inf
        notTake=solve(i-1,amt)
        if amt>denominations[i]:
            take=1+solve(i,amt-denominations[i])
        elif amt==denominations[i]:
            take=solve(i,amt-denominations[i])
        else:
            take=math.inf
        return min(take,notTake)
    return solve(len(denominations)-1,amount)
