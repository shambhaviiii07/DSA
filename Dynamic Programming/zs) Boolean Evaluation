Problem Link--->https://www.codingninjas.com/codestudio/problems/problem-name-boolean-evaluation_1214650?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0


mod=1000000007
def evaluateExp(exp):

Tabulation

    dp=[[[0 for k in range(2)]for i in range(len(exp))]for j in range(len(exp))]
    for i in range(len(exp)-1,-1,-1):
        for j in range(len(exp)):
            for isTrue in range(2):
                if i>j:
                    continue
                if i==j:
                    if isTrue:
                        dp[i][j][isTrue]= exp[i]=='T'
                        continue
                    else:
                        dp[i][j][isTrue]= exp[i]=='F'
                        continue
                ways=0
                for k in range(i+1,j,2):
                    lTrue= dp[i][k-1][1]
                    lFalse=dp[i][k-1][0]
                    rTrue= dp[k+1][j][1]
                    rFalse=dp[k+1][j][0]
                    if exp[k]=='&':
                        if isTrue:
                            ways=(ways+(rTrue*lTrue)%mod)%mod
                        else:
                            ways=(ways+(rTrue*lFalse)%mod+(rFalse*lTrue)%mod+(rFalse*lFalse)%mod)%mod
                    elif exp[k]=='|':
                        if isTrue:
                            ways=(ways+(rTrue*lTrue)%mod+(lTrue*rFalse)%mod+(lFalse*rTrue)%mod)%mod
                        else:
                            ways=(ways+(rFalse*lFalse)%mod)%mod
                    else:
                        if isTrue:
                            ways=(ways+(lTrue*rFalse)%mod+(rTrue*lFalse)%mod)%mod
                        else:
                            ways=(ways+(lTrue*rTrue)%mod+(lFalse*rFalse)%mod)%mod

                dp[i][j][isTrue]= ways
        
    return dp[0][len(exp)-1][1]

Memoization

    dp=[[[-1 for k in range(2)]for i in range(len(exp))]for j in range(len(exp))]
    def solve(i,j,isTrue):
        if i>j:
            return 0
        if i==j:
            if isTrue:
                return exp[i]=='T'
            else:
                return exp[i]=='F'
        if dp[i][j][isTrue]!=-1:
            return dp[i][j][isTrue]
        ways=0
        for k in range(i+1,j,2):
            lTrue=solve(i,k-1,1)
            lFalse=solve(i,k-1,0)
            rTrue=solve(k+1,j,1)
            rFalse=solve(k+1,j,0)
            if exp[k]=='&':
                if isTrue:
                    ways=(ways+(rTrue*lTrue)%mod)%mod
                else:
                    ways=(ways+(rTrue*lFalse)%mod+(rFalse*lTrue)%mod+(rFalse*lFalse)%mod)%mod
            elif exp[k]=='|':
                if isTrue:
                    ways=(ways+(rTrue*lTrue)%mod+(lTrue*rFalse)%mod+(lFalse*rTrue)%mod)%mod
                else:
                    ways=(ways+(rFalse*lFalse)%mod)%mod
            else:
                if isTrue:
                    ways=(ways+(lTrue*rFalse)%mod+(rTrue*lFalse)%mod)%mod
                else:
                    ways=(ways+(lTrue*rTrue)%mod+(lFalse*rFalse)%mod)%mod
        
        dp[i][j][isTrue]= ways
        return ways
    return solve(0,len(exp)-1,1)
    
    
Recursion
    
    def solve(i,j,isTrue):
        if i>j:
            return 0
        if i==j:
            if isTrue:
                return exp[i]=='T'
            else:
                return exp[i]=='F'
        ways=0
        for k in range(i+1,j,2):
            lTrue=solve(i,k-1,1)
            lFalse=solve(i,k-1,0)
            rTrue=solve(k+1,j,1)
            rFalse=solve(k+1,j,0)
            if exp[k]=='&':
                if isTrue:
                    ways=(ways+(rTrue*lTrue)%mod)%mod
                else:
                    ways=(ways+(rTrue*lFalse)%mod+(rFalse*lTrue)%mod+(rFalse*lFalse)%mod)%mod
            elif exp[k]=='|':
                if isTrue:
                    ways=(ways+(rTrue*lTrue)%mod+(lTrue*rFalse)%mod+(lFalse*rTrue)%mod)%mod
                else:
                    ways=(ways+(rFalse*lFalse)%mod)%mod
            else:
                if isTrue:
                    ways=(ways+(lTrue*rFalse)%mod+(rTrue*lFalse)%mod)%mod
                else:
                    ways=(ways+(lTrue*rTrue)%mod+(lFalse*rFalse)%mod)%mod
        
        return ways           
    return solve(0,len(exp)-1,1)
