Problem Link--->https://www.codingninjas.com/codestudio/problems/matrix-chain-multiplication_975344?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

Tabulation

TC-O(N*N)*N
SC-O(N*N)

import math
def matrixMultiplication(arr, n):
    dp=[[0 for j in range(n)]for i in range(n)]
    for i in range(n-1,0,-1):
        for j in range(i+1,n):
                mini=math.inf
                for k in range(i,j):
                    steps=arr[i-1]*arr[k]*arr[j]+dp[i][k]+dp[k+1][j]
                    mini=min(mini,steps)
                dp[i][j]=mini
    return dp[1][n-1]

Memoization

TC-O(N*N)*N
SC-O(N*N)+O(N)

import math
def matrixMultiplication(arr, n):
    dp=[[-1 for j in range(n)]for i in range(n)]
    def solve(i,j):
        if i==j:
            return 0
        if dp[i][j]!=-1:
            return dp[i][j]
        mini=math.inf
        for k in range(i,j):
            steps=arr[i-1]*arr[j]*arr[k]+solve(i,k)+solve(k+1,j)
            mini= min(mini,steps)
        dp[i][j]= mini
        return dp[i][j]
    return solve(1,n-1)
    
    
Recursion
    
import math
def matrixMultiplication(arr, n):
    def solve(i,j):
        if i==j:
            return 0
        mini=math.inf
        for k in range(i,j):
            steps=arr[i-1]*arr[j]*arr[k]+solve(i,k)+solve(k+1,j)
            mini= min(mini,steps)
        return mini
    return solve(1,n-1)
