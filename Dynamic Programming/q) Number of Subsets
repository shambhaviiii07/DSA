Problem Link--->https://www.codingninjas.com/codestudio/problems/number-of-subsets_3952532?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1


def findWays(arr: List[int], tar: int) -> int:
    
    RECURSION
    
    n=len(arr)
    def solve(i,target):
        if target==0:
            return 1
        if i==0:
            return int(arr[i]==target)
        notTake=solve(i-1,target)
        take=0
        if arr[i]<=target:
            take=solve(i-1,target-arr[i])
        return take + notTake
    return solve(n-1,tar)
    
    MEMOIZATION
    
    n=len(arr)
    dp=[[-1 for j in range(tar+1)]for i in range(n)]
    def solve(i,target):
        if target==0:
            return 1
        if i==0:
            return int(arr[i]==target)
        if dp[i][target]!=-1:
            return dp[i][target]
        notTake=solve(i-1,target)
        take=0
        if arr[i]<=target:
            take=solve(i-1,target-arr[i])
        dp[i][target]= take + notTake
        return dp[i][target]
    return solve(n-1,tar)
        
    TABULATION
    
    dp=[[0 for j in range(tar+1)]for i in range(len(arr))]
    for i in range(len(arr)):
        dp[i][0]=1
    if arr[0]<=tar:
        dp[0][arr[0]]=1
    for i in range(1,len(arr)):
        for j in range(tar+1):
            
                notTake=dp[i-1][j]
                take=0
                if arr[i]<=j:
                    take=dp[i-1][j-arr[i]]
                dp[i][j]=take+notTake
    return dp[len(arr)-1][tar]
        
