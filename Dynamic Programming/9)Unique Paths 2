Problem Link--->https://leetcode.com/problems/unique-paths-ii

class Solution:
    def uniquePathsWithObstacles(self, grid: List[List[int]]) -> int:
    
    Tabulation
    
        if grid[0][0] or grid[-1][-1]:
            return 0
        dp=[[0 for j in range(len(grid[0]))]for i in range(len(grid))]
        for i in range(len(grid)):
            if grid[i][0]:
                break
            dp[i][0]=1
        for j in range(1,len(grid[0])):
            if grid[0][j]:
                break
            dp[0][j]=1
        for i in range(1,len(grid)):
            for j in range(1,len(grid[0])):
                if not grid[i][j] and not grid[i-1][j] and not grid[i][j-1]:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1]
                elif not grid[i][j] and not grid[i-1][j]:
                    dp[i][j]=dp[i-1][j]
                elif not grid[i][j] and not grid[i][j-1]:
                    dp[i][j]=dp[i][j-1]
                else:
                    dp[i][j]=0
        return dp[-1][-1]

        Memoization
        
        dp=[[-1 for j in range(len(grid[0]))]for i in range(len(grid))]
        def solve(i,j):
            if i>=0 and j>=0 and grid[i][j]:
                return 0
            if i==0 and j==0:
                return 1
            if i<0 or j<0:
                return 0
            if dp[i][j]!=-1:
                return dp[i][j]
            up=solve(i-1,j)
            left=solve(i,j-1)
            dp[i][j]= up+left
            return dp[i][j]
        return solve(len(grid)-1,len(grid[0])-1)

        Recursion
        
        def solve(i,j):
            if i>=0 and j>=0 and grid[i][j]:
                return 0
            if i==0 and j==0:
                return 1
            if i<0 or j<0:
                return 0
            up=solve(i-1,j)
            left=solve(i,j-1)
            return up+left
        return solve(len(grid)-1,len(grid[0])-1)
