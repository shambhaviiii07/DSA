class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
    
Space Optimization
    
        after,curr=[0 for j in range(len(nums)+1)],[0 for j in range(len(nums)+1)]
        for i in range(len(nums)-1,-1,-1):
            for prev in range(i-1,-2,-1):
                notTake=after[prev]
                take=0
                if prev==-1 or nums[i]>nums[prev]:
                    take=dp[i+1][i]+1
                curr[prev]=max(take,notTake)
            a
        return curr[-1]


import math
def longestIncreasingSubsequence(arr, n) :
    dp=[1]*n
    maxi=-math.inf
    for i in range(n):
        for j in range(i):
            if arr[i]>arr[j]:
                dp[i]=max(dp[i],1+dp[j])
        maxi=max(maxi,dp[i])
    return maxi

Tabulation

        dp=[[0 for j in range(len(nums)+1)]for i in range(len(nums)+1)]
        for i in range(len(nums)-1,-1,-1):
            for prev in range(i-1,-2,-1):
                notTake=dp[i+1][prev]
                take=0
                if prev==-1 or nums[i]>nums[prev]:
                    take=dp[i+1][i]+1
                dp[i][prev]=max(take,notTake)
        return dp[0][-1]

Memoization

        dp=[[-1 for j in range(len(nums)+1)]for i in range(len(nums))]
        def solve(i,prev):
            if i==len(nums):
                return 0
            if dp[i][prev]!=-1:
                return dp[i][prev]
            notTake=solve(i+1,prev)
            take=0
            if prev==-1 or nums[i]>nums[prev]:
                take=solve(i+1,i)+1
            dp[i][prev]= max(take,notTake)
            return dp[i][prev]
        return solve(0,-1)

Recursion

        def solve(i,prev):
            if i==len(nums):
                return 0
            notTake=solve(i+1,prev)
            take=0
            if prev==-1 or nums[i]>nums[prev]:
                take=solve(i+1,i)+1
            return max(take,notTake)
        return solve(0,-1)


TC-O(n*logn)
SC-O(n)

import bisect
def longestIncreasingSubsequence(arr, n) :
    temp=[arr[0]]
    length=1
    for i in range(1,n):
        if arr[i]>temp[-1]:
            temp.append(arr[i])
            length+=1
        else:
            ind=bisect.bisect_left(temp,arr[i],0,length)
            temp[ind]=arr[i]
	# Your code goes here
    return length
