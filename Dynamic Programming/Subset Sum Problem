Problem Link-->https://practice.geeksforgeeks.org/problems/subset-sum-problem-1611555638/1/#

class Solution:
    def isSubsetSum (self, N, arr, summ):
        dp=[[-1 for j in range(summ+1)]for i in range(N+1)]
        for i in range(N+1):
            for j in range(sum+1):
                if i==0 and j==0:
                    dp[i][j]=True
                elif j==0:
                    dp[i][j]=True
        def helper(N,summ,arr,dp):
            if dp[N][summ]!=-1:
                return dp[N][summ]
            if summ== 0:
                dp[N][summ] = True
                return dp[N][summ]
            if N == 0:
                dp[N][summ] = False
                return dp[N][summ]
            if arr[N-1]>summ:
                dp[N][summ] = helper(N-1,summ,arr,dp)
                return dp[N][summ]
            dp[N][summ] = helper(N-1,summ,arr,dp) or helper(N-1,summ-arr[N-1],arr,dp)
            return dp[N][summ]
        helper(N,summ,arr,dp)
        return dp[-1][-1]
        # code here 
        # def solve(i,s):
        #     if i>=len(arr):
        #         return s==sum
        #     return solve(i+1,s+arr[i]) or solve(i+1,s)
        # return solve(0,0)
        
        

class Solution:
    def isSubsetSum (self, N, arr, summ):
        dp=[[False for j in range(summ+1)]for i in range(N+1)]
        for i in range(N+1):
            dp[i][0]=True
                
        for i in range(1,N+1):
            for j in range(1,summ+1):
                if arr[i-1]>j:
                    dp[i][j]=dp[i-1][j]
                else:
                    dp[i][j]=dp[i-1][j] or dp[i-1][j-arr[i-1]]
        return dp[-1][-1]
