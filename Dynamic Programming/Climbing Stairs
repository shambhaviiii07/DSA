Problem Link--->https://leetcode.com/problems/climbing-stairs/

class Solution:
    def climbStairs(self, n: int) -> int:
        if n==1:
            return 1
        a,b=1,1
        for i in range(2,n+1):
            ans=a+b
            a=b
            b=ans 
        return ans

        dp=[-1 for _ in range(n+1)]
        dp[0]=1
        dp[1]=1
        for i in range(2,n+1):
            dp[i]=dp[i-1]+dp[i-2]
        return dp[n]

        dp=[-1 for _ in range(n+1)]
        def solve(i):
            if i==0:
                return 1
            if i<0:
                return 0
            if dp[i]!=-1:
                return dp[i]
            dp[i]=solve(i-2)+solve(i-1)
            return dp[i]
        return solve(n)

        def solve(i):
            if i==0:
                return 1
            if i<0:
                return 0
            return solve(i-1)+solve(i-2)
        return solve(n)

        dp=[-1 for _ in range(n+1)]
        def solve(i):
            if n==i:
                return 1
            if n<i:
                return 0
            if dp[i]!=-1:
                return dp[i]
            dp[i]=solve(i+1)+solve(i+2)
            return dp[i]
        return solve(0)
        # TLE
        # def solve(i):
        #     if i==n:
        #         return 1
        #     if i>n:
        #         return 0
        #     return solve(i+1)+solve(i+2)
        # return solve(0)
                
