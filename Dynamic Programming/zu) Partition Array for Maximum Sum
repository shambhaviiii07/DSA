Problem Link--->https://leetcode.com/problems/partition-array-for-maximum-sum/description/

class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
    
    Tabulation
    
        dp=[0 for j in range(len(arr)+1)]
        for j in range(len(arr)-1,-1,-1):
            length=0
            maxi=-float('inf')
            maxSum=-float('inf')
            for i in range(j,min(j+k,len(arr))):
                length+=1
                maxi=max(maxi,arr[i])
                sum=length*maxi+dp[i+1]
                maxSum=max(maxSum,sum)
            dp[j]=maxSum
        return dp[0]


    Memoization

        dp=[-1 for j in range(len(arr))]
        def solve(i):
            if i==len(arr):
                return 0
            if dp[i]!=-1:
                return dp[i]
            length=0
            maxi=-math.inf
            maxSum=-math.inf 
            for ind in range(i,min(i+k,len(arr))):
                length+=1
                maxi=max(maxi,arr[ind])
                sum=length*maxi+solve(ind+1)
                maxSum=max(maxSum,sum)
            dp[i]=maxSum
            return maxSum
        return solve(0)

    Recursion

        def solve(i):
            if i==len(arr):
                return 0
            length=0
            maxi=-math.inf
            maxSum=-math.inf 
            for ind in range(i,min(i+k,len(arr))):
                length+=1
                maxi=max(maxi,arr[ind])
                sum=length*maxi+solve(ind+1)
                maxSum=max(maxSum,sum)
            return maxSum
        return solve(0)
