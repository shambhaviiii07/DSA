Problem Link--->https://leetcode.com/problems/wildcard-matching/

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
    
    TABULATION
    
        if not s:
            for k in p:
                if k!='*':
                    return False
            else:
                return True
        dp=[[False for j in range(len(s)+1)]for i in range(len(p)+1)]
        dp[0][0]=True
        for i in range(1,len(p)+1):
            for k in range(1,i+1):
                if p[k-1]!="*":
                    break
            else:
                dp[i][0]=True
        for i in range(1,len(p)+1):
            for j in range(1,len(s)+1):
                if s[j-1]==p[i-1] or p[i-1]=='?':
                    dp[i][j]=dp[i-1][j-1]
                else:
                    if p[i-1]=='*':
                        dp[i][j]=dp[i-1][j] or dp[i][j-1]
                    
        return dp[len(p)][len(s)]
        
        MEMOIZATION
        
        if not s:
            for k in p:
                if k!='*':
                    return False
            else:
                return True
        dp=[[-1 for j in range(len(s)+1)]for i in range(len(p)+1)]
        
        def solve(i,j):
            if i==0 and j==0: return True
            if i==0 and j>0: return False
            if dp[i][j]!=-1:
                return dp[i][j]
            if i>0 and j==0:
                for k in range(i):
                    if p[k]!='*': return False
                return True
            if s[j-1]==p[i-1] or p[i-1]=='?':
                dp[i][j]= solve(i-1,j-1)
                return dp[i][j]
            if p[i-1]=='*':
                dp[i][j]= solve(i-1,j) or solve(i,j-1)
                return dp[i][j]
            dp[i][j]= False
            return dp[i][j]
        return solve(len(p),len(s))
        
        RECURSION
        
        def solve(i,j):
            if i<0 and j<0: return True
            if i<0 and j>=0: return False
            if i>=0 and j<0:
                for k in range(i+1):
                    if p[k]!='*': return False
                return True
            if s[j]==p[i] or p[i]=='?':
                return solve(i-1,j-1)
            if p[i]=='*':
                return solve(i-1,j) or solve(i,j-1)
            return False
        return solve(len(p)-1,len(s)-1)
