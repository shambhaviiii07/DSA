Problem Link--->https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=0

Recursive

def subsetSumToK(n, k, arr):
    def solve(i,target):
        if target==0:
            return True
        if i==0:
            return arr[0]==target
        notTake=solve(i-1,target)
        take=False
        if arr[i]<=target:
            take=solve(i-1,target-arr[i])
        return take or notTake
    return solve(n-1,k)
    
Memoization
    
def subsetSumToK(n, k, arr):
    dp=[[-1 for j in range(k+1)]for i in range(n)]
    def solve(i,target):
        if target==0:
            return True
        if i==0:
            return arr[0]==target
        if dp[i][target]!=-1:
            return dp[i][target]
        notTake=solve(i-1,target)
        take=False
        if arr[i]<=target:
            take=solve(i-1,target-arr[i])
        dp[i][target]= take or notTake
        return dp[i][target]
    return solve(n-1,k)
    
Tabulation

def subsetSumToK(n, k, arr):
    dp=[[False for j in range(k+1)]for i in range(n)]
    for i in range(n):
        dp[i][0]=True
    for i in range(n):
        for j in range(1,k+1):
            if i==0:
                dp[i][j]=(arr[i]==j)
            else:
                notTake=dp[i-1][j]
                take=False
                if arr[i]<=j:
                    take=dp[i-1][j-arr[i]]
                dp[i][j]=take or notTake
    return dp[n-1][k]
    
