Problem Link--->https://www.codingninjas.com/codestudio/problems/frog-jump_3621012?leftPanelTab=1

Memoization
TOP DOWN

TC-O(N)
SC-O(N)+O(N) [DP + STACK SPACE]

def frogJump(n: int, heights: List[int]) -> int:
    dp=[-1 for _ in range(len(heights))]
    def solve(i):
        if i==0:                                                  --->  BASE CASE
            return 0
        if dp[i]!=-1:
            return dp[i]
        left,right=math.inf,math.inf                              --->a
        left=solve(i-1)+abs(heights[i-1]-heights[i])              --->b
        if i-2>=0:right=solve(i-2)+abs(heights[i-2]-heights[i])   --->c
        dp[i] = min(left,right)                                   --->d
        return dp[i]                                              
    return solve(len(heights)-1)
    
    
Tabulation
BOTTOM UP

TC-O(N)
SC-O(N)

import math
def frogJump(n: int, heights: List[int]) -> int:

    dp=[-1 for i in range(len(heights))]
    dp[0]=0                                                       --->  BASE CASE
    for i in range(1,len(heights)):
        right=math.inf                                            --->a
        left=dp[i-1]+abs(heights[i]-heights[i-1])                 --->b
        if i>1:right=dp[i-2]+abs(heights[i]-heights[i-2])         --->c
        dp[i]=min(right,left)                                     --->d
    return dp[len(heights)-1]     
    
TC-O(N)
SC-O(1)

import math
def frogJump(n: int, heights: List[int]) -> int:
    prev1,prev2=0,0
    for i in range(1,len(heights)):
        left=prev1+abs(heights[i]-heights[i-1])
        right=math.inf
        if i>1:
            right=prev2+abs(heights[i-2]-heights[i])
        curr=min(right,left)
        
        prev2=prev1
        prev1=curr
    return curr
