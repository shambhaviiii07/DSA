Problem Link--->https://www.codingninjas.com/codestudio/problems/minimum-path-sum_985349?leftPanelTab=1

import math
def minSumPath(grid):
    
    dp=[[0 for j in range(len(grid[0]))]for i in range(len(grid))]          --->Tabulation
   
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if i==0 and j==0:
                dp[i][j]=grid[i][j]
            else:
                up=grid[i][j]
                if i>0:
                    up+=dp[i-1][j]
                else:
                    up+=math.inf
                left=grid[i][j]
                if j>0:
                    left+=dp[i][j-1]
                else:
                    left+=math.inf
                dp[i][j]=min(left,up)
    return dp[-1][-1]
    
    dp=[[-1 for j in range(len(grid[0]))]for i in range(len(grid))]         --->Memoization
    def solve(i,j):
        if i<0 or j<0:
            return math.inf
        if i==0 and j==0:
            return grid[i][j]
        if dp[i][j]!=-1:
            return dp[i][j]
        up=grid[i][j]+solve(i-1,j)
        left=grid[i][j]+solve(i,j-1)
        dp[i][j]=min(up,left)
        return dp[i][j]
    return solve(len(grid)-1,len(grid[0])-1)
    
    def solve(i,j):                                                          --->Recursive
        if i<0 or j<0:
            return math.inf
        if i==0 and j==0:
            return grid[i][j]
        up=grid[i][j]+solve(i-1,j)
        left=grid[i][j]+solve(i,j-1)
        mini=min(up,left)
        return mini
    return solve(len(grid)-1,len(grid[0])-1)


Space Optimization

def minSumPath(grid):
    prev=[0 for j in range(len(grid[0]))]
   
    for i in range(len(grid)):
        curr=[0 for j in range(len(grid[0]))]
        for j in range(len(grid[0])):
            if i==0 and j==0:
                curr[j]=grid[i][j]
            else:
                up=grid[i][j]
                if i>0:
                    up+=prev[j]
                else:
                    up+=math.inf
                left=grid[i][j]
                if j>0:
                    left+=curr[j-1]
                else:
                    left+=math.inf
                curr[j]=min(left,up)
        prev=curr 
    return prev[-1]
