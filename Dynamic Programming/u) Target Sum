Problem Link--->https://leetcode.com/problems/target-sum/description/

class Solution:
      def findTargetSumWays(self, nums: List[int], target: int) -> int:
        dp={}
        def solve(i,target):
            if i<0:
                if target==0:
                    return 1
                return 0
            if (i,target) in dp:
                return dp[(i,target)]
            plus=solve(i-1,target-arr[i])
            minus=solve(i-1,target+arr[i])
            dp[(i,target)] =plus+minus
            return dp[(i,target)]
        return solve(len(arr)-1,target)


      def countPartitions(n: int, d: int, arr: List[int]) -> int:         #r) Partition with given difference
          def solve(i,sum):
              if i==0:
                  if sum==0 and arr[i]==0:
                      return 2
                  if sum==arr[i] or sum==0:
                      return 1
                  return 0
              if dp[i][sum]!=-1:
                  return dp[i][sum]
              notTake=solve(i-1,sum)
              take=0
              if arr[i]<=sum:
                  take=solve(i-1,sum-arr[i])
              dp[i][sum]=(take + notTake)
              return dp[i][sum]
          totalSum=sum(arr)
          if totalSum-d<0 or (totalSum-d)%2:
              return 0
          dp=[[-1 for j in range(((totalSum-d)//2)+1)]for i in range(n)]
          return solve(n-1,(totalSum-d)//2)

      def targetSum(arr: List[int], target: int) -> int:
          return countPartitions(len(arr),target,arr)
