Problem Link--->https://leetcode.com/problems/maximal-rectangle/

class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        rightSmallest=[]
        leftSmallest=[]
        stack=[]
        LargestRectangleInHistogram=-float('inf')
        for i in range(len(heights)):
            while stack and stack[-1][1]>=heights[i]:
                stack.pop()
            if stack:
                leftSmallest.append(stack[-1][0])
            else:
                leftSmallest.append(-1)
            stack.append([i,heights[i]])
        stack=[]
        for i in range(len(heights)-1,-1,-1):
            while stack and stack[-1][1]>=heights[i]:
                stack.pop()
            if stack:
                rightSmallest.append(stack[-1][0])
            else:
                rightSmallest.append(len(heights))
            stack.append([i,heights[i]])
        rightSmallest.reverse()
        for i in range(len(heights)):
            LargestRectangleInHistogram=max(LargestRectangleInHistogram,(rightSmallest[i]-leftSmallest[i]-1)*heights[i])
        return LargestRectangleInHistogram
    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        matrix[0]=[int(i) for i in matrix[0]]
        maximum=-1
        for i in range(1,len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j]!='0':
                    matrix[i][j]=int(matrix[i][j])+matrix[i-1][j]
                else:
                    matrix[i][j]=0
        for row in matrix:
            maximum=max(maximum,self.largestRectangleArea(row))
        return maximum
            
        
