Problem Link--->https://practice.geeksforgeeks.org/problems/longest-common-substring1452/1#


import math
class Solution:
    def longestCommonSubstr(self, s,t, n, m):
        ans=0
        dp=[[0 for i in range(len(t)+1)]for j in range(len(s)+1)]
        for i in range(1,len(s)+1):
            for j in range(1,len(t)+1):
                if s[i-1]==t[j-1]:
                    dp[i][j]=1+dp[i-1][j-1]
                    ans=max(ans,dp[i][j])
        return ans
        
        
        dp={}
        def memoization(i,j,count):
            if i==0 or j==0:
                return count
            if (i,j,count) in dp:
                return dp[(i,j,count)]
            f1=count
            if s[i-1]==t[j-1]:
                f1=memoization(i-1,j-1,count+1)
            f2=memoization(i-1,j,0)
            f3=memoization(i,j-1,0)
            dp[(i,j,count)]=max(f1,f2,f3)
            return dp[(i,j,count)]
        return memoization(len(s),len(t),0)
        
        def recursive(i,j,count):
            if i==0 or j==0:
                return count
            f1=count
            if s[i-1]==t[j-1]:
                f1=recursive(i-1,j-1,count+1)
            f2=recursive(i,j-1,0)
            f3=recursive(i-1,j,0)
            return max(f1,f2,f3)
        return recursive(len(s),len(t),0)
