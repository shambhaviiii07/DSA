
Recursive

def frogJump(arr,k):
  def solve(i):
    if i==0:
      return 0
    minJump=math.inf
    for j in range(1,k+1):
      if i-j>=0:
        jump=solve(i-j)+abs(arr[i]-arr[i-j])
        minJump=min(minJump,jump)
    return minJump
 return solve(len(arr)-1)

Memoization

TC-O(N*K)
SC-O(N)+O(N)

def frogJump(arr,k):
  dp=[-1 for i in range(len(arr))]
  def solve(i):
    if i==0:
      return 0
    if dp[i]!=-1:
      return dp[i]
    minJump=math.inf
    for j in range(1,k+1):
      if i-j>=0:
        jump=solve(i-j)+abs(arr[i]-arr[i-j])
        minJump=min(minJump,jump)
    dp[i]= minJump
    return dp[i]
 return solve(len(arr)-1)
 
 Tabulation
 
 TC-O(N*K)
 SC-O(N)
 
 def frogJump(arr,k):
  dp=[-1 for _ in range(len(arr))]
  dp[0]=0
  for i in range(1,len(arr)):
    minJump=math.inf
    for j in range(1,k+1):
      if i-j>=0:
        jump=dp[i-j]+abs(arr[i-j]-arr[i])
        minJump=min(minJump,jump)
    dp[i]=minJump
 return dp[len(arr)-1]
 
