#DFS to detect cycle in Undirected Graph
def dfs(node,prev):
    visited[node]=True
    for dost in d[node]:
        if visited[dost]==False:
            if dfs(dost,node)==True:
                return True
        elif dost!=prev:
            return True
    return False
n=5
edges=[[1,4],[2,4],[3,1],[3,2]]
visited=[False]*n
d={i:[] for i in range(n)}
for u,v in edges:
    d[u].append(v)
    d[v].append(u)
for node in edges:
    if visited[node[0]] is not True:
        if dfs(node[0],-1):
            print('Cycle')
            break
else:
    print('no Cycle')
    
#DFS to detect a cycle in Directed Graph
'''def dfs(node):
    if d[node]==[]:
        return True
    if node in visitSet:
        return False
    visitSet.add(node)
    for dost in d[node]:
        if not dfs(dost):
            return False
    visitSet.remove(node)
    d[node]=[]
    return True

n=5
edges=[[1,4],[2,4],[3,1],[3,2]]
d={i:[] for i in range(n)}
for frm,to in edges:
    d[frm].append(to)
visitSet=set()
for node in range(n):
    if not dfs(node):
        print('Cycle')
print('No cycle')

'''
