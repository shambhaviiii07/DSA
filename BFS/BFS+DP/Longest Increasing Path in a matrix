Problem Link--->https://leetcode.com/problems/longest-increasing-path-in-a-matrix/

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        dp=[[1]*len(matrix[0])for i in range(len(matrix))]
        ans=-math.inf
        for row in range(len(matrix)):
            for col in range(len(matrix[0])):
                queue=deque()
                queue.append([row,col])
                while queue:
                    i,j=queue.popleft()
                    if i+1<len(matrix) and matrix[i+1][j]>matrix[i][j] and dp[i][j]+1>dp[i+1][j]:
                        queue.append([i+1,j])
                        dp[i+1][j]= dp[i][j]+1
                    if j+1<len(matrix[0]) and matrix[i][j+1]>matrix[i][j] and dp[i][j]+1>dp[i][j+1]:
                        queue.append([i,j+1])
                        dp[i][j+1]= dp[i][j]+1
                    if j-1>-1 and matrix[i][j-1]>matrix[i][j] and dp[i][j]+1>dp[i][j-1]:
                        queue.append([i,j-1])
                        dp[i][j-1]= dp[i][j]+1
                    if i-1>-1 and matrix[i-1][j]>matrix[i][j] and  dp[i][j]+1>dp[i-1][j]:
                        queue.append([i-1,j])
                        dp[i-1][j]= dp[i][j]+1
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                ans=max(ans,dp[i][j])
        return ans
