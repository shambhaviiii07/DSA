Problem Link--->https://leetcode.com/problems/rotting-oranges/

class Node:
    def __init__(self,x,y,time):
        self.x=x
        self.y=y
        self.time=time
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        queue=deque()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==2:
                    node=Node(i,j,0)
                    queue.append(node)
        ans=0
        while queue:
            curr=queue.popleft()
            x,y,time=curr.x,curr.y,curr.time
            if x-1>=0 and grid[x-1][y]==1:
                grid[x-1][y]=2
                node=Node(x-1,y,time+1)
                ans=time+1
                queue.append(node)
            if x+1<len(grid) and grid[x+1][y]==1:
                grid[x+1][y]=2
                node=Node(x+1,y,time+1)
                ans=time+1
                queue.append(node)
            if y-1>=0 and grid[x][y-1]==1:
                grid[x][y-1]=2
                node=Node(x,y-1,time+1)
                ans=time+1
                queue.append(node)
            if y+1<len(grid[0]) and grid[x][y+1]==1:
                grid[x][y+1]=2
                node=Node(x,y+1,time+1)
                ans=time+1
                queue.append(node)
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    return -1
        return ans
