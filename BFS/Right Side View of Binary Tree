Method I

def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        right_view=[]
        if root is None:
            return right_view
        queue=deque()
        queue.append(root)
        bfs=deque()
        while queue:
            level_size=len(queue)
            curr_lvl=deque()
            for i in range(level_size):
                t=queue.popleft()
                curr_lvl.append(t.val)
                if t.left:
                    queue.append(t.left)
                if t.right:
                    queue.append(t.right)
            bfs.append(curr_lvl)
        for i in range(len(bfs)):
            t=len(bfs[i])
            right_view.append(bfs[i][t-1])
        return right_view

Method II


def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        right_view=[]
        levelSet=set()
        if root is None:
            return right_view
        def postOrder(root,level):
            if level not in levelSet:
                right_view.append(root.val)
                levelSet.add(level)
            if root.right:
                postOrder(root.right,level+1)
            if root.left:
                postOrder(root.left,level+1)
            
        postOrder(root,0)
        return right_view
