#Shortest Path to Get Food
#Leetcode Premium Question
#BFS
from collections import deque
class Node:
    def __init__(self,x,y,distance):
        self.x=x
        self.y=y
        self.distance=distance
class Solution:
    def Shortest_Path_to_Get_Food(self,grid: List[List[int]])->int:
        queue=deque()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=='*':
                    node=Node(i,j,0)
                    queue.append(node)
        while queue:
            curr=queue.popleft()
            x,y,distance=curr.x,curr.y,curr.distance
            if x-1>=0 and grid[x-1][y]=='#':
                return distance+1
            elif x-1>=0 and grid[x-1][y]=='0':
                grid[x-1][y]='X'
                node=Node(x-1,y,distance+1)
                queue.append(node)
            if x+1<len(grid) and grid[x+1][y]=='#':
                return distance+1
            elif x+1<len(grid) and grid[x+1][y]=='0':
                grid[x+1][y]='X'
                node=Node(x+1,y,distance+1)
                queue.append(node)
            if y+1<len(grid[0]) and grid[x][y+1]=='0':
                grid[x][y+1]='X'
                node=Node(x,y+1,distance+1)
                queue.append(node)
            elif y+1<len(grid[0]) and grid[x][y+1]=='#':
                return distance+1
            if y-1>=0 and grid[x][y-1]=='#':
                return distance+1
            elif y-1>=0 and grid[x][y-1]=='0':
                grid[x][y-1]='X'
                node=Node(x,y-1,distance+1)
                queue.append(node)
        return -1
