Problem Link-->https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        queue=deque()
        queue.append([0,0,0,k])
        visited=set()
        while queue:
            i,j,step,k=queue.popleft()
            if (i,j,k) not in visited:
                if i+1<len(grid) and grid[i+1][j]!=1:
                    queue.append([i+1,j,step+1,k])
                if i+1<len(grid) and grid[i+1][j]==1 and k:
                    queue.append([i+1,j,step+1,k-1])
                if i-1>=0 and grid[i-1][j]==1 and k:
                    queue.append([i-1,j,step+1,k-1])
                if i-1>=0 and grid[i-1][j]==0:
                    queue.append([i-1,j,step+1,k])
                if j+1<len(grid[0]) and grid[i][j+1]==1 and k:
                    queue.append([i,j+1,step+1,k-1])
                if j+1<len(grid[0]) and grid[i][j+1]==0:
                    queue.append([i,j+1,step+1,k])
                if j-1>=0 and grid[i][j-1]==1 and k:
                    queue.append([i,j-1,step+1,k-1])
                if j-1>=0 and grid[i][j-1]==0:
                    queue.append([i,j-1,step+1,k])
                if i==len(grid)-1 and j==len(grid[0])-1:
                    return step
                visited.add((i,j,k))
        return -1
