Problem Link--->https://leetcode.com/problems/interleaving-string/

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        # Recursion with Memoization
        def memoization(i,j,k):
            if i==len(s1):
                return s2[j:]==s3[k:]
            if j==len(s2):
                return s1[i:]==s3[k:]
            if dp[i][j]==0:
                return False
            elif dp[i][j]==1:
                return True
            ans=False
            if (s3[k]==s1[i] and memoization(i+1,j,k+1)) or (s3[k]==s2[j] and memoization(i,j+1,k+1)):
                ans=True
            if ans:
                dp[i][j]=1
            else:
                dp[i][j]=0
            return ans
        if len(s1)+len(s2)!=len(s3):
            return False
        dp=[[-1 for j in range(len(s2))]for i in range(len(s1))]
        i=0     #index for s1
        j=0     #index for s2
        k=0     #index for s3
        return memoization(i,j,k)        
        #Recursive Approach
        # def recur(i,j,res):
        #     if res==s3 and i==len(s1) and j==len(s2):
        #         return True
        #     ans=False
        #     if i<len(s1):
        #         ans=ans or recur(i+1,j,res+s1[i])
        #     if j<len(s2):
        #         ans=ans or recur(i,j+1,res+s2[j])
        #     return ans
        # if len(s1)+len(s2)!=len(s3):
        #     return False
        # return recur(0,0,"")
