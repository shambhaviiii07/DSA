Problem Link--->https://leetcode.com/problems/longest-common-subsequence/

Memoization Approach
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        def lcs(text1,text2,m,n,dp):
            if n==0 or m==0:
                return 0
            if dp[n][m]!=-1:
                return dp[n][m]
            if text1[m-1]==text2[n-1]:
                dp[n][m]=1+lcs(text1,text2,m-1,n-1,dp)
                return dp[n][m]
            dp[n][m]=max(lcs(text1,text2,m,n-1,dp),lcs(text1,text2,m-1,n,dp))
            return dp[n][m]
        m=len(text1)
        n=len(text2)
        dp=[[-1 for i in range(m+1)] for j in range(n+1)]
        for i in range(n+1):
            for j in range(m+1):
                if i==0 or j==0:
                    dp[i][j]=0
        result=lcs(text1,text2,m,n,dp)
        return result
