Problem Link---> https://practice.geeksforgeeks.org/problems/minimum-number-of-deletions4610/1/#

class Solution:
    def minDeletions(self, str, n): 
        #code here
        str_rev=str[::-1]
        dp=[[0 for i in range(len(str)+1)]for j in range(len(str)+1)]
        for i in range(1,len(str)+1):
            for j in range(1,len(str)+1):
                if str_rev[j-1]==str[i-1]:
                    dp[i][j]=1+dp[i-1][j-1]
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])
        return n-dp[n][n]
        
        # def lcs(dp,s,t,n,m):
        #     if n==0 or m==0:
        #         return 0
        #     if dp[n][m]!=-1:
        #         return dp[n][m]
        #     if s[n-1]==t[m-1]:
        #         dp[n][m]=1+lcs(dp,s,t,n-1,m-1)
        #         return dp[n][m]
        #     dp[n][m]=max(lcs(dp,s,t,n-1,m),lcs(dp,s,t,n,m-1))
        #     return dp[n][m]
        # dp=[[-1 for i in range(len(str)+1)]for j in range(len(str)+1)]
        # for i in range(len(str)+1):
        #     for j in range(len(str)+1):
        #         if i==0 or j==0:
        #             dp[i][j]=0
        # t=str[::-1]
        # return len(str)-lcs(dp,str,t,len(str),len(str))
